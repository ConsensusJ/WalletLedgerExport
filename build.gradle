buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert'    version '3.3.2'
    id 'org.ajoberstar.git-publish'     version '2.1.3'
    id 'com.github.hierynomus.license'  version '0.16.1'  apply false
    id 'java'
    id 'groovy'
    id 'application'
}

version = ledgerExportVersion
group = 'org.consensusj'

ext.moduleName = 'org.consensusj.tool.ledgerexport'

application {
    mainClass = 'org.consensusj.tool.ledgerexport'
    applicationName = 'LedgerExport'
}

tasks.withType(JavaCompile) {
    options.release = 17
}

repositories {
    mavenCentral()
    if (useMavenLocal == "true") {
        mavenLocal()
    }
    maven { url 'https://gitlab.com/api/v4/projects/8482916/packages/maven' } // ConsensusJ (RPC client)
    maven { url 'https://gitlab.com/api/v4/projects/26583853/packages/maven' }  // OmniJ
}

dependencies {
    implementation "com.msgilligan:cj-btc-jsonrpc:${consensusjVersion}"
    implementation "foundation.omni:omnij-jsonrpc:${omnijVersion}"
    implementation "foundation.omni:omnij-money:${omnijVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    runtimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"     // Runtime implementation of slf4j for tests
}

run {
    args = [ 'regtest']
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Implementation-Title': 'Wallet Ledger Export',
                'Automatic-Module-Name': moduleName,
                'Implementation-Version': archiveVersion.get(),
                'Main-Class': application.mainClass
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

tasks.withType(AbstractArchiveTask) {
    // This should result in reproducible JAR builds
    // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

test {
    useJUnitPlatform()
}

apply from: 'gradle/licenseCheck.gradle'

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        uploadInBackground = false
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
