buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert'    version '3.3.2'
    id 'org.ajoberstar.git-publish'     version '2.1.3'
    id 'com.github.hierynomus.license'  version '0.16.1'  apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'

    group 'org.consensusj'
    version ledgerExportVersion

    repositories {
        mavenCentral()
        if (useMavenLocal == "true") {
            mavenLocal()
        }
        maven { url 'https://gitlab.com/api/v4/projects/8482916/packages/maven' }   // ConsensusJ (RPC client)
        maven { url 'https://gitlab.com/api/v4/projects/26583853/packages/maven' }  // OmniJ
    }

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
        testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"     // Runtime implementation of slf4j for tests
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(JavaCompile) {
        options.release = 17
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }

    tasks.withType(AbstractArchiveTask) {
        // This should result in reproducible JAR builds
        // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    test {
        useJUnitPlatform()
    }
}

apply from: 'gradle/licenseCheck.gradle'

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        uploadInBackground = false
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
