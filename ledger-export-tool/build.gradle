plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.16'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
}

ext.moduleName = 'org.consensusj.ledgerexport.tool'

def mainClassName = "org.consensusj.ledgerexport.tool.WalletAccountingExport"

application {
    mainClass = mainClassName
    applicationName = 'LedgerExport'
}

dependencies {
    implementation project(':ledger-export-lib')
    implementation 'info.picocli:picocli:4.7.7'

    annotationProcessor 'info.picocli:picocli-codegen:4.7.7'

    runtimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes 'Implementation-Title': 'Wallet Ledger Export Tool',
                'Automatic-Module-Name': moduleName,
                'Implementation-Version': archiveVersion.get(),
                'Main-Class': application.mainClass
    }
}

run {
    args = [ '-n', 'mainnet', '-o', 'omnicore-export.ledger', '-m', '../test-data/addresses_accounts.csv']
}

graalvmNative {
    binaries {
        main {
            imageName = applicationName
            //configurationFileDirectories.from(file('src/main/graal'))
            buildArgs.addAll('--allow-incomplete-classpath', '-H:EnableURLProtocols=http,https')
            runtimeArgs.addAll('-n', 'mainnet', '-o', 'omnicore-export.ledger', '-m', '../test-data/addresses_accounts.csv')
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.matching("GraalVM Community")
            }
        }
    }
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(sourceSets.main.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    mainClass = 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v" //, "--template-dir=src/docs/mantemplates"
}

asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${project.buildDir}/generated-picocli-docs")
    outputDir = file("${project.buildDir}/tool-docs")
    logDocuments = true
    outputOptions {
        backends = ['manpage', 'html5']
    }
}


